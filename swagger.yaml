openapi: 3.0.0
info:
  version: 1.0.0
  title: Expense API
  description: API to handle own expenses
servers:
  - url: https://localhost/api/
tags:
  - name: expenses
paths:
  /expenses:
    get:
      tags:
        - expenses
      summary: Get expenses
      description: Returns a array of expenses
      parameters:
        - name: category
          in: query
          description: Category of expense
          required: false
          schema:
            type: string
        - name: shop
          in: query
          description: Shop of expense
          required: false
          schema:
            type: string
        - name: sortAmount
          in: query
          description: Sorts expenses order by amount
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
        - name: sortDate
          in: query
          description: Sorts expenses order by date
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expense'
                  total:
                    type: integer
                items:
                  type: array

        '500':
          $ref: '#/components/responses/500Error'
    post:
      tags:
        - expenses
      summary: Create a new expense
      description: Create a new expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                amount:
                  type: integer
                category:
                  type: string
                shop:
                  type: string
      responses:
        '201':
          description: Created succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/400Error'
        '500':
          $ref: '#/components/responses/500Error'

    put:
      tags:
        - expenses
      summary: Update an existing expense
      description: Update an existing expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
      responses:
        '200':
          description: Updated succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
        '500':
          $ref: '#/components/responses/500Error'
  /expneses/{id}:
    delete:
      tags:
        - expenses
      summary: Deletes a expense
      description: Delete a expense
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Expense deleted
          content:
            text/plain:
              schema:
                type: string
                example: Expense deleted
  /expenses/month/{monthId}:
    get:
      tags:
        - expenses
      summary: Gets expenses by given month
      description: Get expenses by given month
      parameters:
        - name: monthId
          in: path
          description: Month id (1-12)
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 12
        - name: category
          in: query
          description: Category of expense
          required: false
          schema:
            type: string
        - name: shop
          in: query
          description: Shop of expense
          required: false
          schema:
            type: string
        - name: sortAmount
          in: query
          description: Sorts expenses order by amount
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
        - name: sortDate
          in: query
          description: Sorts expenses order by date
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expense'
                  total:
                    type: integer
                items:
                  type: array
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
        '500':
          $ref: '#/components/responses/500Error'
components:
  schemas:
    Expense:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
        amount:
          type: integer
        category:
          type: string
        shop:
          type: string
  responses:
    400Error:
      description: Invalid request
      content:
        text/plain:
          schema:
            type: string
            example: <property> is required | <date> length must be at least 10 characters long
    404Error:
      description: Not found
      content:
        text/plain:
          schema:
            type: string
            example: Not found
    500Error:
      description: Internal error
      content:
        text/plain:
          schema:
            type: string
            example: Internal error
